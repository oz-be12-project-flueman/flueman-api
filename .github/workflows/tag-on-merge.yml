# 목적: release/x.y.z → main PR이 머지되면 자동으로 태그 vX.Y.Z 생성 및 GitHub Release 발행
# 트리거: main 브랜치로의 PR closed(merged == true) 이벤트
# 주의: release 브랜치명은 반드시 release/x.y.z (SemVer: 숫자.숫자.숫자) 형식 준수

name: Tag & Release on Merge

on:
  pull_request:
    types: [closed] # PR이 닫힐 때(머지 포함)
    branches: [main] # 대상: main

permissions:
  contents: write # 태그/릴리스 생성 권한
  pull-requests: read

jobs:
  tag:
    # 조건: PR이 "머지" 되었고, 소스 브랜치가 release/* 인 경우만
    if: >
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - name: Extract & validate version from branch # 브랜치명에서 x.y.z 추출 + SemVer 검증
        id: ver
        shell: bash
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"   # e.g. release/1.2.3
          VERSION="${BRANCH#release/}"

          # SemVer(숫자.숫자.숫자) 검증 (프리릴리스/빌드메타 필요시 정규식 확장 가능)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION (expected x.y.z)"
            exit 1
          fi

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Checkout (full history for tagging) # 태깅 위해 히스토리 확보
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure tag does not already exist # 중복 태그 방지
        id: tagcheck
        shell: bash
        run: |
          TAG="v${{ steps.ver.outputs.version }}"
          if git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
            echo "Tag ${TAG} already exists. Exiting."
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create tag # 병합 커밋에 태그 생성/푸시
        if: steps.tagcheck.outputs.exists == 'false'
        shell: bash
        run: |
          TAG="v${{ steps.ver.outputs.version }}"
          COMMIT="${{ github.event.pull_request.merge_commit_sha }}"
          git tag "${TAG}" "${COMMIT}"
          git push origin "${TAG}"

      - name: Create GitHub Release # 릴리스 발행(노트 자동)
        if: steps.tagcheck.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.ver.outputs.version }}"
          name: "Flueman API v${{ steps.ver.outputs.version }}"
          generate_release_notes: true

# 목적: PR 품질 게이트. lint → test → build 를 순서대로 실행해 최소 품질 기준 확보
# 트리거: main/dev 대상 Pull Request, 수동 실행(workflow_dispatch)
# 보호규칙: main에는 ci/lint, ci/test, ci/build 필수 체크 / dev는 ci/lint, ci/test 권장
# 참고: pull_request_target 는 권한 이슈가 있어 기본 비활성(주석). 외부 PR 신뢰 시에만 사용 권장.

name: CI

on:
  pull_request:
    branches: [main, dev] # PR 생성/업데이트 시 동작
  # pull_request_target:
  #   branches: [main] # 외부 PR 등 특수 케이스용 (권한 주의)
  workflow_dispatch: # 수동 실행

permissions:
  contents: read

jobs:
  lint:
    name: ci/lint # ✅ 코드 스타일/정적 분석
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # 코드 체크아웃

      - name: Set up Python # Python 3.12 환경 세팅
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip # pip 캐시로 설치 속도 향상 (constraints 포함)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py312-pip-${{ hashFiles('constraints.txt', 'requirements.txt', 'requirements-dev.txt', '**/pyproject.toml') }}
          restore-keys: ${{ runner.os }}-py312-pip-

      - name: Install deps (lint) # 운영+dev 의존성 + 공통 제약 적용
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt -c constraints.txt

      - name: Ruff # 코드 스타일/린트
        run: ruff check .

      - name: Mypy (optional) # 타입 체크(선택, 실패 허용)
        run: mypy app || true

  test:
    name: ci/test # ✅ 단위/통합 테스트
    runs-on: ubuntu-latest
    needs: [lint] # lint 통과 후 실행
    services:
      mysql: # MySQL 테스트 컨테이너 기동
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: flueman_test
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python # Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py312-pip-${{ hashFiles('constraints.txt', 'requirements.txt', 'requirements-dev.txt', '**/pyproject.toml') }}
          restore-keys: ${{ runner.os }}-py312-pip-

      - name: Install deps (test) # 운영+dev 의존성 + 공통 제약 적용
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt -c constraints.txt

      - name: Wait for MySQL # DB 가용 대기
        run: |
          for i in `seq 1 30`; do
            mysqladmin ping -h 127.0.0.1 -proot && break
            sleep 2
          done

      - name: Run tests # 테스트 실행(+커버리지)
        env:
          DB_URL: "mysql+pymysql://root:root@127.0.0.1:3306/flueman_test"
          ENV: test
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=app --cov-report=term-missing

  build:
    name: ci/build # ✅ Docker 빌드 검증(푸시 X)
    runs-on: ubuntu-latest
    needs: [test] # 테스트 통과 후 실행
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx # 멀티플랫폼 빌드 지원
        uses: docker/setup-buildx-action@v3

      - name: Build (no push) # 이미지 빌드만 진행
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: ghcr.io/${{ github.repository }}:pr-${{ github.event.number }}
